/*
 * eeprom_mmap.c
 *
 *  Created on: 2016Äê6ÔÂ30ÈÕ
 *      Author: zctiaxia
 */

#include "include.h"

const uint8_t MMAP_MCB[MEMDEP_MCB][3] = {
//		entry		addr	format code
		0x01 	,	0	,	1	,
		0x02 	,	20	,	5	,
		0x03 	,	22	,	5	,
		0x04 	,	24	,	3	,
		0x05 	,	25	,	3	,
		0x06 	,	26	,	5	,
		0x30 	,	28	,	1	,
		0x32 	,	48	,	1	,
		0x35 	,	68	,	1	,
		0x43 	,	88	,	16	,
		0x44 	,	92	,	1	,
		0x46 	,	112	,	3

};

const uint8_t MMAP_XYZ[MEMDEP_XYZ][3] = {
		0x01 	,	256	,	1	,
		0x02 	,	276	,	5	,
		0x03 	,	278	,	5	,
		0x04 	,	280	,	3	,
		0x05 	,	281	,	3	,
		0x06 	,	282	,	5	,
		0x12 	,	284	,	6	,
		0x30 	,	288	,	6	,
		0x33 	,	292	,	6	,
		0x41 	,	296	,	6	,
		0x42 	,	300	,	6	,
		0x43 	,	304	,	6	,
		0x44 	,	308	,	6	,
		0x45 	,	312	,	6	,
		0x46 	,	316	,	6	,
		0x91 	,	320	,	6	,
		0x92 	,	324	,	6	,
		0x93 	,	328	,	6	,
		0x94 	,	332	,	6	,
		0x95 	,	336	,	6	,
		0x96 	,	340	,	6	,
		0xA1 	,	344	,	6	,
		0xA2 	,	348	,	6	,
		0xA3 	,	352	,	6	,
		0xA4 	,	356	,	6	,
		0xA5 	,	360	,	6	,
		0xA6 	,	364	,	6
};

const uint8_t MMAP_LIGHTCTRL[MEMDEP_LIGHTCTRL][3] = {
		0x01 	,	512	,	1	,
		0x02 	,	532	,	5	,
		0x03 	,	534	,	5	,
		0x04 	,	536	,	3	,
		0x05 	,	537	,	3	,
		0x06 	,	538	,	5	,
		0x10 	,	540	,	1	,
		0x11 	,	560	,	3	,
		0x12 	,	561	,	2	,
		0x13 	,	562	,	2	,
		0x14 	,	563	,	5	,
		0x15 	,	565	,	5	,
		0xFD 	,	567	,	5	,
		0xFE 	,	569	,	5
};

const uint8_t MMAP_RFLM[MEMDEP_RFLM][3] = {
		0x01 	,	768	,	1	,
		0x02 	,	788	,	5	,
		0x03 	,	790	,	5	,
		0x04 	,	792	,	3	,
		0x05 	,	793	,	3	,
		0x06 	,	794	,	5	,
		0x10 	,	796	,	5	,
		0x11 	,	798	,	5	,
		0x12 	,	800	,	5	,
		0x13 	,	802	,	5	,
		0x14 	,	804	,	5	,
		0x15 	,	806	,	5	,
		0x20 	,	808	,	5	,
		0x21 	,	810	,	5	,
		0x22 	,	812	,	5	,
		0x23 	,	814	,	5	,
		0x24 	,	816	,	5	,
		0x25 	,	818	,	5	,
		0x30 	,	820	,	5	,
		0x31 	,	822	,	5	,
		0x32 	,	824	,	5	,
		0x33 	,	826	,	5	,
		0x34 	,	828	,	5	,
		0x35 	,	830	,	5	,
		0x40 	,	832	,	5	,
		0x41 	,	834	,	5	,
		0x42 	,	836	,	5	,
		0x43 	,	838	,	5	,
		0x44 	,	840	,	5	,
		0x45 	,	842	,	5	,
		0x50	,	844	,	5	,
		0x51	,	846	,	5	,
		0x52 	,	848	,	5	,
		0x53 	,	850	,	5	,
		0x54 	,	852	,	5	,
		0x55 	,	854	,	5	,
		0x60 	,	856	,	5	,
		0x61 	,	858	,	5	,
		0x62 	,	860	,	5	,
		0x63 	,	862	,	5	,
		0x64 	,	864	,	5	,
		0x65 	,	866	,	5	,
		0x70 	,	868	,	5	,
		0x71 	,	870	,	5	,
		0x72 	,	872	,	5	,
		0x73 	,	874	,	5	,
		0x74 	,	876	,	5	,
		0x75 	,	878	,	5	,
		0xFD 	,	868	,	5	,
		0xFE 	,	870	,	5
};

const uint8_t MMAP_TMLM[MEMDEP_TMLM][3] = {
		0x01 	,	1024	,	1	,
		0x02 	,	1044	,	5	,
		0x03 	,	1046	,	5	,
		0x04 	,	1048	,	3	,
		0x05 	,	1049	,	3	,
		0x06 	,	1050	,	5	,
		0x10 	,	1052	,	5	,
		0x11 	,	1054	,	5	,
		0x12 	,	1056	,	5	,
		0x13 	,	1058	,	5	,
		0x14 	,	1060	,	5	,
		0x15 	,	1062	,	5	,
		0xFD 	,	1064	,	5	,
		0xFE 	,	1066	,	5
};

const uint8_t MMAP_USRSETTING[MEMDEP_USRSETTING][3] = {
		0x01 	,	1280	,	1	,
		0x02 	,	1300	,	5	,
		0x03 	,	1302	,	5	,
		0x04 	,	1304	,	3	,
		0x05 	,	1305	,	3	,
		0x06 	,	1306	,	5	,
		0x10	,	1308	,	1	,
		0x11	,	1328	,	1	,
		0x12	,	1348	,	1	,
		0x13	,	1368	,	1	,
		0x14	,	1388	,	1	,
		0x15	,	1408	,	1	,
		0x16	,	1428	,	1	,
		0x90	,	1448	,	3	,
		0x91	,	1449	,	3	,
		0x92	,	1450	,	3	,
		0x93	,	1451	,	3	,
		0x94	,	1452	,	3	,
		0x95	,	1453	,	3	,
		0x96	,	1454	,	3	,
		0xA0	,	1455	,	3	,
		0xA1	,	1456	,	3	,
		0xA2	,	1457	,	3	,
		0xA3	,	1458	,	3	,
		0xA4	,	1459	,	3	,
		0xA5	,	1460	,	3	,
		0xA6	,	1461	,	3	,
		0xAB	,	1462	,	3	,
		0xAC	,	1463	,	3	,
		0xAD	,	1464	,	3	,
		0xAE	,	1465	,	3
};

const uint8_t MMAP_ELEMENTS[MEMDEP_ELEMENTS][3] = {
		0x01 	,	1792	,	1	,
		0x02 	,	1812	,	5	,
		0x03 	,	1814	,	5	,
		0x04 	,	1816	,	3	,
		0x05 	,	1817	,	3	,
		0x06 	,	1818	,	5	,
		0x10	,	1820	,	1	,
		0x11	,	1840	,	1	,
		0x12	,	1860	,	16	,
		0x13	,	1864	,	16	,
		0x14	,	1868	,	1	,
		0x15	,	1888	,	1	,
		0x16	,	1908	,	5	,
		0x17	,	1910	,	1	,
		0x18	,	1930	,	1	,
		0x19	,	1950	,	1	,
		0x1A	,	1970	,	16	,
		0x1B	,	1974	,	16	,
		0x1C	,	1978	,	4	,
		0x1D	,	1980	,	4	,
		0x1E	,	1982	,	7	,
		0x1F	,	1986	,	7	,
		0x20	,	1990	,	1	,
		0x21	,	2010	,	1	,
		0x22	,	2030	,	16	,
		0x23	,	2034	,	16	,
		0x24	,	2038	,	1	,
		0x25	,	2058	,	1	,
		0x26	,	2078	,	5	,
		0x27	,	2080	,	1	,
		0x28	,	2100	,	1	,
		0x29	,	2120	,	1	,
		0x2A	,	2140	,	16	,
		0x2B	,	2144	,	16	,
		0x2C	,	2148	,	4	,
		0x2D	,	2150	,	4	,
		0x2E	,	2152	,	7	,
		0x2F	,	2156	,	7	,
		0x30	,	2160	,	1	,
		0x31	,	2180	,	1	,
		0x32	,	2200	,	16	,
		0x33	,	2204	,	16	,
		0x34	,	2208	,	1	,
		0x35	,	2228	,	1	,
		0x36	,	2248	,	5	,
		0x37	,	2250	,	1	,
		0x38	,	2270	,	1	,
		0x39	,	2290	,	1	,
		0x3A	,	2310	,	16	,
		0x3B	,	2314	,	16	,
		0x3C	,	2318	,	4	,
		0x3D	,	2320	,	4	,
		0x3E	,	2322	,	7	,
		0x3F	,	2326	,	7	,
		0x40	,	2330	,	1	,
		0x41	,	2350	,	1	,
		0x42	,	2370	,	16	,
		0x43	,	2374	,	16	,
		0x44	,	2378	,	1	,
		0x45	,	2398	,	1	,
		0x46	,	2418	,	5	,
		0x47	,	2420	,	1	,
		0x48	,	2440	,	1	,
		0x49	,	2460	,	1	,
		0x4A	,	2480	,	16	,
		0x4B	,	2484	,	16	,
		0x4C	,	2488	,	4	,
		0x4D	,	2490	,	4	,
		0x4E	,	2492	,	7	,
		0x4F	,	2496	,	7	,
		0x50	,	2500	,	1	,
		0x51	,	2520	,	1	,
		0x52	,	2540	,	16	,
		0x53	,	2544	,	16	,
		0x54	,	2548	,	1	,
		0x55	,	2568	,	1	,
		0x56	,	2588	,	5	,
		0x57	,	2590	,	1	,
		0x58	,	2610	,	1	,
		0x59	,	2630	,	1	,
		0x5A	,	2650	,	16	,
		0x5B	,	2654	,	16	,
		0x5C	,	2658	,	4	,
		0x5D	,	2660	,	4	,
		0x5E	,	2662	,	7	,
		0x5F	,	2666	,	7	,
		0x60	,	2670	,	1	,
		0x61	,	2690	,	1	,
		0x62	,	2710	,	16	,
		0x63	,	2714	,	16	,
		0x64	,	2718	,	1	,
		0x65	,	2738	,	1	,
		0x66	,	2758	,	5	,
		0x67	,	2760	,	1	,
		0x68	,	2780	,	1	,
		0x69	,	2800	,	1	,
		0x6A	,	2820	,	16	,
		0x6B	,	2824	,	16	,
		0x6C	,	2828	,	4	,
		0x6D	,	2830	,	4	,
		0x6E	,	2832	,	7	,
		0x6F	,	2836	,	7	
};

const Uint16 *
BinarySearch(const Uint16 arr[][3],Uint16 len,Uint16 key)
{
	Uint16 low,high;
	high = len - 1;        // Assume the array is ranked from low to high on papre
	low = 0;
	Uint16 midle = len >> 2;

	if (key > arr[high][0]) // search value lower than LUT range
		return NULL;
	else if (key < arr[low][0])
		return NULL;

	while(high >= low) {
		if ((high - low) == 1) {
			if (arr[high][0] == key)
				return &arr[high][0];
			if (arr[low][0] == key)
				return arr[low];
			else return NULL;
		}
		midle = (high + low) >> 1;

		if(arr[midle][0] == key)
			return *(arr+midle);
		if(arr[midle][0] > key)
			high = midle ;     // Precondition is that the array is ranked from high to low
		else if(arr[midle][0] < key )
			low = midle;
	}
	return NULL;
}

/* this function is example for declare a funciton returning address of array[5]
Uint16 (*fun(Uint16 (*arr)[5]))[5]
{
	return arr;
}*/
